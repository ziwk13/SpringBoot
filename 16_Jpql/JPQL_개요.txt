* JPQL (Java Persistence Query Language)
  1. 엔티티(객체)를 중심으로 개발하기 위한 객체 지향 쿼리문입니다.
  2. SQL 보다 간결하며 특정 DBMS 에 의존하지 않습니다.
  3. SQL과 유사하지만 "테이블/칼럼" 대신 "엔티티/필드"를 사용합니다.
  4. find() 메소드를 통한 조회와 다르게 항상 데이터베이스에서 조회합니다.
  5. JPQL로 조회한 엔티티는 영속 컨텍스트에 저장됩니다.
  6. SELECT, UPDATE, DELETE 문은 SQL문과 동일한 구문을 사용합니다.
  7. INSERT 문은 persist() 메소드를 사용합니다.
  8. JPQL의 구문은 대소문자를 구분하지 않습니다. (SELECT from Where)
  9. 엔티티와 필드의 대소문자는 반드시 구분해야 합니다. (Product, Category)
  10. JPQL은 반드시 엔티티의 별명(Alias)을 사용해야 합니다. (에러 발생)



* JPQL 작성 순서
  1. JPQL 문자열을 작성합니다. (SELECT 필드 FROM 엔티티)
  2. 작성된 JPQL 문자열을 EntityManager 의 createQuery() 메소드에 전달합니다.
    1) TypedQuery : 반환할 타입을 명확하게 지정할 때 사용합니다. 
    2) Query      : 반환할 타입을 명시하지 않습니다. 반환 타입은 Object 또는 Object[]  입니다.
  3. 쿼리 객체(TypedQuery, Query)가 제공하는 getSingleResult() 또는 getResultList() 메소드를 호출해서 쿼리를 실행합니다.
    1) getSingleResult() : 결과 행이 1개일 때 사용합니다. 결과가 없거나 2개 이상이면 예외가 발생합니다.
    2) getResultList()   : 결과 행이 2개 이상일 때 사용합니다. 결과가 없으면 비어 있는 컬렉션을 반환합니다.



* 프로젝션 (Projection)
  1. SELECT 절에서 조회할 대상을 지정하는 것을 의미합니다.
    SELECT { 프로젝션 대상 } FROM 
  2. 종류
    1) 엔티티 프로젝션 : 엔티티를 조회하는 방식입니다. 조회된 엔티티는 영속 컨텍스트에 저장됩니다.
    2) 스칼라 타입 프로젝션 : 기본 데이터(숫자, 문자, 날짜 등)를 조회하는 방식입니다. 조회된 스칼라 데이터는 영속 컨텍스트에 저장되지 않습니다.
    3) 임베디드 타입 프로젝션 : @Embeddable 을 이용해 포함한 객체를 조회하는 방식입니다. 조회된 임베디드 타입은 영속 컨텍스트에 저장되지 않습니다. 임베디드 타입은 FROM 절에서 사용할 수 없습니다.
    4) new 생성 프로젝션 : 다양한 값을 저장한 DTO 방식으로 조회하는 방식입니다. new 를 이용해 객체를 생성하기 때문에 영속 컨텍스트에 저장되지 않습니다.